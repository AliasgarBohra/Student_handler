{"ast":null,"code":"import React, { useEffect, useRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport Logo from \"../../asset/chat.jpg\";\nimport Home from \"./Home\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar BGColor = \"black\";\nexport default function SplashScreen() {\n  var edges = useSafeAreaInsets();\n  var startAnimation = useRef(new Animated.Value(0)).current;\n  var scaleLogo = useRef(new Animated.Value(1)).current;\n  var scaleTitle = useRef(new Animated.Value(1)).current;\n  var moveLogo = useRef(new Animated.ValueXY({\n    x: 0,\n    y: 0\n  })).current;\n  var moveTitle = useRef(new Animated.ValueXY({\n    x: 0,\n    y: 0\n  })).current;\n  var contentTransition = useRef(new Animated.Value(Dimensions.get('window').height)).current;\n  useEffect(function () {\n    setTimeout(function () {\n      Animated.parallel([Animated.timing(startAnimation, {\n        toValue: -Dimensions.get('window').height + (edges.top + 65),\n        useNativeDriver: true\n      }), Animated.timing(scaleLogo, {\n        toValue: 0.3,\n        useNativeDriver: true\n      }), Animated.timing(scaleTitle, {\n        toValue: 0.8,\n        useNativeDriver: true\n      }), Animated.timing(moveLogo, {\n        toValue: {\n          x: Dimensions.get(\"window\").width / 2 - 35,\n          y: Dimensions.get('window').height / 2 - 5\n        },\n        useNativeDriver: true\n      }), Animated.timing(moveTitle, {\n        toValue: {\n          x: 0,\n          y: Dimensions.get('window').height / 2 - 90\n        },\n        useNativeDriver: true\n      }), Animated.timing(contentTransition, {\n        toValue: 0,\n        useNativeDriver: true\n      })]).start();\n    }, 500);\n  }, []);\n  return _jsxs(View, {\n    style: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0\n    },\n    children: [_jsx(Animated.View, {\n      style: {\n        flex: 1,\n        backgroundColor: BGColor,\n        zIndex: 1,\n        transform: [{\n          translateY: startAnimation\n        }]\n      },\n      children: _jsxs(Animated.View, {\n        style: {\n          flex: 1,\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: [_jsx(Animated.Image, {\n          source: Logo,\n          style: {\n            width: 100,\n            height: 100,\n            marginBottom: 20,\n            transform: [{\n              translateX: moveLogo.x\n            }, {\n              translateY: moveLogo.y\n            }, {\n              scale: scaleLogo\n            }]\n          }\n        }), _jsx(Animated.Text, {\n          style: {\n            fontSize: 25,\n            fontWeight: 'bold',\n            color: 'white',\n            transform: [{\n              translateY: moveTitle.y\n            }, {\n              scale: scaleTitle\n            }]\n          },\n          children: \"Chatty\"\n        })]\n      })\n    }), _jsx(Animated.View, {\n      style: {\n        position: 'absolute',\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        backgroundColor: 'rgba(0,0,0,0.04)',\n        zIndex: 0,\n        transform: [{\n          translateY: contentTransition\n        }]\n      },\n      children: _jsx(Home, {})\n    })]\n  });\n}","map":{"version":3,"sources":["E:/INtership/Minnor-project/src/Components/SplashScreen.js"],"names":["React","useEffect","useRef","useSafeAreaInsets","Logo","Home","BGColor","SplashScreen","edges","startAnimation","Animated","Value","current","scaleLogo","scaleTitle","moveLogo","ValueXY","x","y","moveTitle","contentTransition","Dimensions","get","height","setTimeout","parallel","timing","toValue","top","useNativeDriver","width","start","position","bottom","left","right","flex","backgroundColor","zIndex","transform","translateY","alignItems","justifyContent","marginBottom","translateX","scale","fontSize","fontWeight","color"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { Animated, Dimensions, Image, Text, View } from \"react-native\";\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\n// Logo....\nimport Logo from \"../../asset/chat.jpg\"\nimport Home from './Home';\n\nconst BGColor = \"black\"\n\nexport default function SplashScreen() {\n\n    // SafeArea Value...\n    const edges = useSafeAreaInsets();\n\n    // Animation Values....\n    const startAnimation = useRef(new Animated.Value(0)).current;\n\n    // Scaling Down Both logo and Title...\n    const scaleLogo = useRef(new Animated.Value(1)).current;\n    const scaleTitle = useRef(new Animated.Value(1)).current;\n\n    // Offset Animation....\n    const moveLogo = useRef(new Animated.ValueXY({ x: 0, y: 0 })).current;\n    const moveTitle = useRef(new Animated.ValueXY({ x: 0, y: 0 })).current;\n\n    // Animating COntent...\n    const contentTransition = useRef(new Animated.Value(Dimensions.get('window').height)).current;\n\n    // Animation Done....\n    useEffect(() => {\n\n        // Starting Animation after 500ms....\n        setTimeout(() => {\n\n            // Parallel Animation...\n            Animated.parallel([\n                Animated.timing(\n                    startAnimation,\n                    {\n                        // For same Height for non safe Area Devices...\n                        toValue: -Dimensions.get('window').height + (edges.top + 65),\n                        useNativeDriver: true\n                    }\n                ),\n                Animated.timing(\n                    scaleLogo,\n                    {\n                        // Scaling to 0.35\n                        toValue: 0.3,\n                        useNativeDriver: true\n                    }\n                ),\n                Animated.timing(\n                    scaleTitle,\n                    {\n                        // Scaling to 0.8\n                        toValue: 0.8,\n                        useNativeDriver: true\n                    }\n                ),\n                Animated.timing(\n                    moveLogo,\n                    {\n                        // Moving to Right Most...\n                        toValue: {\n                            x: (Dimensions.get(\"window\").width / 2) - 35,\n                            y: (Dimensions.get('window').height / 2) - 5\n                        },\n                        useNativeDriver: true\n                    }\n                ),\n                Animated.timing(\n                    moveTitle,\n                    {\n                        // Moving to Right Most...\n                        toValue: {\n                            x: 0,\n                            // Since image size is 100...\n                            y: (Dimensions.get('window').height / 2) - 90\n                        },\n                        useNativeDriver: true\n                    }\n                ),\n                Animated.timing(\n                    contentTransition,\n                    {\n                        toValue: 0,\n                        useNativeDriver: true\n                    }\n                )\n            ])\n                .start();\n\n        }, 500);\n\n    }, [])\n\n    // Going to Move Up like Nav Bar...\n    return (\n\n        <View style={{\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n        }}>\n            <Animated.View style={{\n                flex: 1,\n                backgroundColor: BGColor,\n                zIndex: 1,\n                transform: [\n                    { translateY: startAnimation }\n                ]\n            }}>\n\n                <Animated.View style={{\n                    flex: 1,\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                }}>\n                    <Animated.Image source={Logo} style={{\n                        width: 100,\n                        height: 100,\n                        marginBottom: 20,\n                        transform: [\n                            { translateX: moveLogo.x },\n                            { translateY: moveLogo.y },\n                            { scale: scaleLogo },\n\n                        ]\n                    }}></Animated.Image>\n\n                    <Animated.Text style={{\n                        fontSize: 25,\n                        fontWeight: 'bold',\n                        color: 'white',\n                        transform: [\n                            { translateY: moveTitle.y },\n                            { scale: scaleTitle }\n                        ]\n                    }}>Chatty</Animated.Text>\n\n                </Animated.View>\n\n            </Animated.View>\n\n            <Animated.View style={{\n                position: 'absolute',\n                top: 0,\n                bottom: 0,\n                left: 0,\n                right: 0,\n                backgroundColor: 'rgba(0,0,0,0.04)',\n                zIndex: 0,\n                transform: [\n                    { translateY: contentTransition }\n                ]\n            }}>\n\n                <Home></Home>\n\n            </Animated.View>\n\n        </View>\n    );\n}"]},"metadata":{},"sourceType":"module"}